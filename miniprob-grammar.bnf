<prog> ::= <decl_list> <func> <func_list>

<decl_list> ::= <decl> ';' <decl_list>
              | ε

<func_list> ::= <func> <func_list>
              | ε

<decl> ::= <type> identifier <id_list>
<id_list> ::= ',' identifier <id_list>
           | ε

<func> ::= identifier '(' <param_list_opt> ')' '{' <decl_list_in_func> block '}'

<param_list_opt> ::= <param_list>
                   | ε

<decl_list_in_func> ::= <decl> ';' <decl_list_in_func>
                      | ε

<func_call> ::= identifier '(' <arg_list_opt> ')'

<arg_list_opt> ::= <arg_list>
                 | ε

<arg_list> ::= <arg> <arg_list_tail>
<arg_list_tail> ::= ',' <arg> <arg_list_tail>
                 | ε

<block> ::= stmt <stmt_list>
<stmt_list> ::= stmt <stmt_list>
              | ε

<stmt> ::= <assignment> ';'
         | <query> ';'
         | <observation> ';'
         | <func_call> ';'
         | <if_then_else>
         | <while>

<assignment> ::= <lval> '=' <assign_rhs>
<assign_rhs> ::= <expr>
               | <distribution>
               | <prob_assign>

<query> ::= 'query' <func_call>

<observation> ::= 'observe' '(' <expr> ')'

<if_then_else> ::= 'if' '(' <expr> ')' '{' block '}' <if_else_opt>
<if_else_opt> ::= 'else' '{' block '}'
                | ε

<while> ::= 'while' '(' <expr> ')' '{' block '}'

<lval> ::= identifier
         | identifier '[' <expr> ']'

<distribution> ::= 'Bernoulli' '(' <expr> ',' <expr> ')'
                 | 'Uniform' '(' <expr> ',' <expr> ')'

<param> ::= <type> <amp_opt> identifier
<amp_opt> ::= '&'
            | ε

<param_list> ::= <param> <param_list_tail>
<param_list_tail> ::= ',' <param> <param_list_tail>
                    | ε

<arg> ::= <expr>
        | <amp_opt> <lval>

<prob_assign> ::= <prob_choice> <prob_choice_list> <expr>
<prob_choice_list> ::= <prob_choice> <prob_choice_list>
                     | ε

<prob_choice> ::= <expr> '{' <expr> ':' <expr> '}'

<expr> ::= <logical_or>

<logical_or> ::= <logical_and> <logical_or_tail>
<logical_or_tail> ::= '||' <logical_and> <logical_or_tail>
                    | ε

<logical_and> ::= <equality> <logical_and_tail>
<logical_and_tail> ::= '&&' <equality> <logical_and_tail>
                     | ε

<equality> ::= <comparison> <equality_tail>
<equality_tail> ::= <equality_op> <comparison> <equality_tail>
                  | ε
<equality_op> ::= '==' | '!='

<comparison> ::= <term> <comparison_tail>
<comparison_tail> ::= <comparison_op> <term> <comparison_tail>
                    | ε
<comparison_op> ::= '>' | '>=' | '<' | '<='

<term> ::= <factor> <term_tail>
<term_tail> ::= ('+' | '-') <factor> <term_tail>
             | ε

<factor> ::= <unary> <factor_tail>
<factor_tail> ::= ('*' | '/') <unary> <factor_tail>
               | ε

<unary> ::= <unary_op> <unary>
         | <primary>
<unary_op> ::= '!' | '-'

<primary> ::= <bool>
            | <int>
            | <lval>
            | '(' <expr> ')'

<binary_op> ::= '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '<=' | '>' | '>=' | '&&' | '||'

/* Lexical nonterminals for illustrative purposes */
/* 
   The following definitions show one way to convert the regular-expression style
   definitions into a recursive BNF. In practice, these are usually defined at the lexer level.
*/

<identifier> ::= <letter> <ident_tail>
<ident_tail> ::= <letter_or_digit> <ident_tail>
               | ε
<letter> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' 
           | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
           | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'
           | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
           | '_'
<letter_or_digit> ::= <letter> | <digit>
<digit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

<type> ::= 'bool'
         | "u'int" 
         | "s'int"
         | "u'int" '[' <int> ']'
         | "s'int" '[' <int> ']'

<int> ::= <digit> <int_tail>
<int_tail> ::= <digit> <int_tail>
            | ε

<bool> ::= "true" | "false"
